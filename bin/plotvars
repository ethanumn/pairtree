#!/usr/bin/env python3
import argparse
import multiprocessing
import numpy as np

import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'lib'))

import common
import clustermaker
import inputparser
import vaf_plotter
import relation_plotter
import plotutil

def write_header(outf):
  print('<!doctype html><html lang="en"><head><meta charset="utf-8"><title>Variants</title>', file=outf)
  print('<script src="https://d3js.org/d3.v5.min.js"></script>', file=outf)
  for jsfn in ('util.js', 'highlight_table_labels.js', 'vaf_matrix.js'):
    print('<script>%s</script>' % plotutil.read_file(jsfn), file=outf)
  print('<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">', file=outf)
  for cssfn in ('matrix.css',):
    print('<style type="text/css">%s</style>' % plotutil.read_file(cssfn), file=outf)
  print('<style type="text/css">.container { margin: 30px; } td, th, table { padding: 5px; margin: 0; border-collapse: collapse; font-weight: normal; } span { visibility: hidden; } td:hover > span { visibility: visible; } .highlighted { background-color: black !important; color: white; }</style>', file=outf)
  print('</head><body><main>', file=outf)

def write_footer(outf):
  print('</main></body></html>', file=outf)

def main():
  parser = argparse.ArgumentParser(
    description='Plot variants and clusters, typically done before building clone trees',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )
  parser.add_argument('--parallel', dest='parallel', type=int, default=None)
  parser.add_argument('--plot-relations', action='store_true')
  parser.add_argument('--garbage-prior', type=float, default=0.)
  parser.add_argument('ssm_fn')
  parser.add_argument('params_fn')
  parser.add_argument('html_out_fn')
  args = parser.parse_args()

  variants = inputparser.load_ssms(args.ssm_fn)
  params = inputparser.load_params(args.params_fn)
  if 'garbage' not in params:
    params['garbage'] = []
  if 'clusters' not in params or len(params['clusters']) == 0:
    params['clusters'] = [[vid] for vid in variants.keys() if vid not in params['garbage']]

  if args.plot_relations:
    parallel = args.parallel if args.parallel is not None else multiprocessing.cpu_count()
    if args.garbage_prior == 0:
      loggarb = -np.inf
    else:
      assert 0. < args.garbage_prior <= 1.
      loggarb = np.log(args.garbage_prior)
    logprior = {'garbage': loggarb}
    supervars, clustrel_posterior, clustrel_evidence, _, _ = clustermaker.use_pre_existing(
      variants,
      logprior,
      parallel,
      params['clusters'],
      params['garbage'],
    )
  else:
    supervars = clustermaker.make_cluster_supervars(params['clusters'], variants)

  supervars = [supervars[vid] for vid in common.sort_vids(supervars.keys())]
  with open(args.html_out_fn, 'w') as outf:
    write_header(outf)

    vaf_plotter.plot_vaf_matrix(
      params['clusters'],
      variants,
      supervars,
      params['garbage'],
      None,
      params['samples'],
      should_correct_vaf=True,
      outf=outf,
    )

    if args.plot_relations:
      relation_plotter.plot_ml_relations(clustrel_posterior, outf)
      relation_plotter.plot_separate_relations(clustrel_posterior, outf)

    write_footer(outf)

if __name__ == '__main__':
  # This is default on Unix but not macOS. Without this, resources aren't
  # inherited by subprocesses on macOS and various things break. However, on
  # macOS, it can cause crashes. See
  # https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
  # On top of this, MacOS throws an exception since set_start_method is called elsewhere, 
  # adding the argument 'force=True' resolves the exception.
  if sys.platform == "darwin":
    multiprocessing.set_start_method('fork', force=True)
  main()
